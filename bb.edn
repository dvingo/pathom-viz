{:paths
 ["src/tasks"]

 :tasks
 {:requires
  ([babashka.fs :as fs]
   [tasks])

  ; region lint

  lint-deps
  (when (fs/modified-since ".clj-kondo/.cache" "deps.edn")
    (shell "bash -c" "clj-kondo --copy-configs --dependencies --lint \"$(clojure -Spath -A:provided:pathom-viz/dev)\" --parallel"))

  lint
  {:depends [lint-deps]
   :task    (shell "clj-kondo --lint src")}

  ;clj-kondo --no-warnings --lint "$(clojure -Spath -A:provided:dev)" --parallel

  ; endregion

  ; region app

  app:css-clean
  (fs/delete-if-exists "shells/electron/compiled-css/main.css")

  app:css-watch
  (shell {:extra-env {"TAILWIND_MODE" "watch"}}
    "npx postcss src/css/tailwind.css -o ./shells/electron/compiled-css/main.css --verbose -w")

  app:css-release
  (shell {:extra-env {"TAILWIND_MODE" "build"
                      "NODE_ENV"      "production"}}
    "npx postcss src/css/tailwind.css -o ./shells/electron/compiled-css/main.css --verbose")

  app:js-clean
  (do
    (fs/delete-tree ".shadow-cljs")
    (fs/delete-tree "shells/electron/js"))

  app:js-deps
  (shell {:dir "shells/electron"} "npm install")

  app:js-watch
  (shell "npx shadow-cljs watch electron-background electron-renderer")

  app:js-release
  {:depends [app:js-deps]
   :task    (shell "npx shadow-cljs release electron-background electron-renderer")}

  app:clean
  {:depends [app:css-clean app:js-clean]}

  app:release
  {:doc     "Release CSS and JS assets"
   :depends [app:clean app:js-release app:css-release]}

  app:pack-test
  {:depends [app:release]
   :task    (shell {:dir "shells/electron"} "npx electron-builder --dir")}

  app:pack
  {:depends [app:js-release]
   :task    (shell {:dir "shells/electron"} "npx electron-builder -mlw")}

  -app:dev
  {:depends [app:css-watch app:js-watch]}

  app:dev
  (shell "bb run --parallel -app:dev")

  app:launch
  {:doc  "Open electron app."
   :task (shell {:dir "shells/electron"} "npx electron .")}

  app:publish
  {:doc  "Publish a new app version."
   :task tasks/release-app}

  ; endregion

  ; region embed

  embed:css-watch
  (shell {:extra-env {"TAILWIND_MODE" "watch"}}
    "npx postcss src/css/tailwind.css -o ./shells/embed/compiled-css/main.css --verbose -w")

  embed:css-release
  (shell {:extra-env {"TAILWIND_MODE" "build"
                      "NODE_ENV"      "production"}}
    "npx postcss src/css/tailwind.css -o ./shells/embed/compiled-css/main.css --verbose")

  embed:js-watch
  (shell "npx shadow-cljs watch embed")

  embed:js-release
  (shell "npx shadow-cljs release embed")

  embed:build-report
  {:doc  "Generate build report for embed"
   :task (do
           (shell "npx shadow-cljs run shadow.cljs.build-report embed embed-report.html")
           (shell "open embed-report.html"))}

  embed:launch
  {:doc  "Open browser with embed dev."
   :task (shell "open http://localhost:8087/embed.html")}

  -embed:dev
  {:depends [embed:css-watch embed:js-watch]}

  embed:dev
  {:doc  "Start watching builds to develop the embed component."
   :task (shell "bb run --parallel -embed:dev")}

  ; endregion
  }}
